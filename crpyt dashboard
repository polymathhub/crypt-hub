
import React, { useEffect, useMemo, useState, useCallback } from 'react';

// ---------- Configuration (wired to your values) ----------
const API_BASE = 'https://api.yoursite.com';
const WS_URL = 'wss://api.yoursite.com/stream';

// ---------- Helper: fetch leaderboard ----------
async function fetchLeaderboard({ page = 1, limit = 10, range = '24h', lang = 'all', q = '', sort = 'score_desc', token } = {}) {
  const url = new URL(`${API_BASE}/leaderboard`);
  url.searchParams.set('page', page);
  url.searchParams.set('limit', limit);
  url.searchParams.set('range', range);
  url.searchParams.set('lang', lang);
  url.searchParams.set('q', q);
  url.searchParams.set('sort', sort);

  const res = await fetch(url.toString(), {
    headers: {
      'Content-Type': 'application/json',
      ...(token ? { Authorization: `Bearer ${token}` } : {}),
    },
  });
  if (!res.ok) {
    const txt = await res.text().catch(() => '');
    throw new Error(`Failed to load leaderboard: ${res.status} ${txt}`);
  }
  return res.json();
}

// ---------- WebSocket hook (reconnects automatically) ----------
function useLeaderboardSocket(token, onMessage) {
  useEffect(() => {
    if (!token) return;
    let ws;
    let reconnectTimer = null;

    function connect() {
      // attach token as query param for auth if your server expects it
      const url = `${WS_URL}?token=${encodeURIComponent(token)}`;
      ws = new WebSocket(url);

      ws.onopen = () => {
        console.info('WS connected');
      };
      ws.onmessage = (ev) => {
        try {
          const data = JSON.parse(ev.data);
          onMessage(data);
        } catch (e) {
          console.error('Malformed WS message', e);
        }
      };
      ws.onclose = (ev) => {
        console.warn('WS closed, reconnecting...', ev.code);
        reconnectTimer = setTimeout(connect, 2000);
      };
      ws.onerror = (err) => {
        console.error('WS error', err);
        ws.close();
      };
    }

    connect();
    return () => {
      if (reconnectTimer) clearTimeout(reconnectTimer);
      if (ws) ws.close();
    };
  }, [token, onMessage]);
}

// ---------- Wallet (MetaMask) auth flow ----------
// Flow assumed:
// 1) Frontend GET /auth/nonce?address=0x... -> { nonce: "..." }
// 2) User signs nonce with personal_sign
// 3) POST /auth/wallet { address, signature } -> { token }

async function getNonce(address) {
  const url = new URL(`${API_BASE}/auth/nonce`);
  url.searchParams.set('address', address);
  const res = await fetch(url.toString());
  if (!res.ok) throw new Error('Failed to fetch nonce');
  return res.json();
}

async function sendSignature(address, signature) {
  const res = await fetch(`${API_BASE}/auth/wallet`, {
    method: 'POST',
    headers: { 'Content-Type': 'application/json' },
    body: JSON.stringify({ address, signature }),
  });
  if (!res.ok) {
    const txt = await res.text().catch(() => '');
    throw new Error(`Auth failed: ${res.status} ${txt}`);
  }
  return res.json();
}

// ---------- Utilities ----------
function formatNumber(n) {
  return n?.toLocaleString?.() ?? n;
}

// ---------- Main App Component ----------
export default function App() {
  const [range, setRange] = useState('24h');
  const [lang, setLang] = useState('all');
  const [search, setSearch] = useState('');
  const [sort, setSort] = useState('score_desc');

  const [page, setPage] = useState(1);
  const [limit, setLimit] = useState(10);

  const [rows, setRows] = useState([]);
  const [total, setTotal] = useState(0);
  const [loading, setLoading] = useState(false);
  const [token, setToken] = useState(() => localStorage.getItem('jwtToken'));
  const [account, setAccount] = useState(null);
  const [wsStatus, setWsStatus] = useState('disconnected');
  const [errorMsg, setErrorMsg] = useState('');
  const [lastUpdatedAt, setLastUpdatedAt] = useState(null);

  const loadData = useCallback(async () => {
    setLoading(true);
    setErrorMsg('');
    try {
      const res = await fetchLeaderboard({ page, limit, range, lang, q: search, sort, token });
      // Expecting { data: [...], total, page, limit }
      setRows(res.data || []);
      setTotal(res.total ?? (res.data ? res.data.length : 0));
      setLastUpdatedAt(new Date());
    } catch (err) {
      console.error(err);
      setErrorMsg(err.message);
    } finally {
      setLoading(false);
    }
  }, [page, limit, range, lang, search, sort, token]);

  useEffect(() => { loadData(); }, [loadData]);

  // live updates via websocket
  useLeaderboardSocket(token, (data) => {
    // handle incoming events; this is generic — adjust to your server messages
    if (data.type === 'leaderboard_update' && data.payload) {
      setRows((prev) => {
        const idx = prev.findIndex(r => r.id === data.payload.id);
        if (idx === -1) return prev;
        const copy = [...prev];
        copy[idx] = { ...copy[idx], ...data.payload };
        return copy;
      });
    } else if (data.type === 'connection') {
      setWsStatus(data.status || 'connected');
    }
  });

  // Wallet login
  async function handleWalletLogin() {
    try {
      setErrorMsg('');
      const { ethereum } = window;
      if (!ethereum) throw new Error('No web3 wallet found (MetaMask required)');

      const accounts = await ethereum.request({ method: 'eth_requestAccounts' });
      const address = accounts[0];
      if (!address) throw new Error('No account found');

      // fetch nonce
      const nonceRes = await getNonce(address);
      const nonce = nonceRes?.nonce ?? nonceRes?.message ?? null;
      if (!nonce) throw new Error('No nonce provided by server');

      // request signature
      // personal_sign expects params: [message, address]
      const signature = await ethereum.request({ method: 'personal_sign', params: [String(nonce), address] });

      // send signature to server
      const authRes = await sendSignature(address, signature);
      const newToken = authRes.token;
      if (!newToken) throw new Error('Server did not return a token');

      localStorage.setItem('jwtToken', newToken);
      setToken(newToken);
      setAccount(address);

      // reload data now that token is set
      setPage(1);
      await loadData();
    } catch (err) {
      console.error(err);  
      setErrorMsg(err.message || String(err));
    }
  }

  function logout() {
    localStorage.removeItem('jwtToken');
    setToken(null);
    setAccount(null);
  }

  const totalPages = Math.max(1, Math.ceil(total / limit));

  function renderRows() {
    if (loading) return <tr><td colSpan="5" className="text-center py-6 text-slate-400">Loading…</td></tr>;
    if (!rows.length) return <tr><td colSpan="5" className="text-center py-6 text-slate-400">No results</td></tr>;
    return rows.map((r, i) => (
      <tr key={r.id} className="hover:bg-slate-900/40">
        <td className="py-3 px-3 w-12 text-sm">{(page - 1) * limit + i + 1}</td>
        <td className="py-3 px-3 font-medium">{r.name}</td>
        <td className="py-3 px-3 text-sm">{formatNumber(r.score)}</td>
        <td className={`py-3 px-3 text-sm ${String(r.change).startsWith('-') ? 'text-rose-400' : 'text-emerald-400'}`}>{r.change}</td>
        <td className="py-3 px-3 text-sm uppercase">{r.lang}</td>
      </tr>
    ));
  }

  // If not authenticated show a wallet-login CTA
  if (!token) {
    return (
      <div className="min-h-screen bg-slate-900 text-slate-100 flex items-center justify-center p-4">
        <div className="max-w-md w-full bg-slate-800 p-6 rounded-2xl shadow">
          <h2 className="text-xl font-bold mb-4">Connect your Wallet</h2>
          <p className="text-slate-400 mb-4">We use a signature-based wallet authentication. Click connect and approve the signature in your wallet.</p>
          {errorMsg && <div className="text-rose-400 mb-3">{errorMsg}</div>}
          <button onClick={handleWalletLogin} className="w-full py-3 rounded bg-indigo-600 hover:bg-indigo-700 font-semibold">Connect Wallet</button>
          <div className="mt-4 text-xs text-slate-500">Requires MetaMask or any injected Ethereum provider.</div>
        </div>
      </div>
    );
  }

  return (
    <div className="min-h-screen bg-slate-900 text-slate-100 antialiased">
      <header className="bg-slate-950/60 sticky top-0 z-30 glass border-b border-slate-800">
        <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
          <div className="flex items-center justify-between h-16">
            <div className="flex items-center gap-4">
              <div className="flex items-center gap-2">
                <div className="w-10 h-10 bg-gradient-to-br from-indigo-500 to-pink-500 rounded-md flex items-center justify-center font-bold">YK</div>
                <span className="font-semibold text-lg">Pre-TGE Arena</span>
              </div>
            </div>

            <div className="flex items-center gap-3">
              <div className="text-sm text-slate-400">{account ? `${account.slice(0,6)}...${account.slice(-4)}` : ''}</div>
              <div className="text-xs text-slate-400">WS: {wsStatus}</div>
              <button onClick={logout} className="text-sm px-3 py-2 border border-slate-700 rounded hover:bg-slate-800">Logout</button>
            </div>
          </div>
        </div>
      </header>

      <main className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-10">
        <section className="grid md:grid-cols-3 gap-8 items-start">
          <div className="md:col-span-2">
            <div className="bg-gradient-to-b from-slate-800 to-slate-900 p-6 rounded-2xl shadow-lg">
              <h1 className="text-3xl md:text-4xl font-extrabold tracking-tight">Pre-TGE Arena — Leaderboards</h1>
              <p className="mt-3 text-slate-300 max-w-2xl">Track top creators and projects. Data powered by your API.</p>

              <div className="mt-6 flex flex-wrap gap-3 items-center">
                <div className="flex gap-2 bg-slate-800 p-2 rounded-lg">
                  {['24h','48h','7d','30d'].map((r) => (
                    <button key={r} onClick={() => { setRange(r); setPage(1); }} className={`px-3 py-1 rounded text-sm ${range === r ? 'bg-indigo-600' : ''}`}>{r.toUpperCase()}</button>
                  ))}
                </div>

                <div className="ml-2 text-sm text-slate-400">Last update: <span>{lastUpdatedAt ? lastUpdatedAt.toLocaleString() : '—'}</span></div>
              </div>
            </div>

            <div className="mt-6">
              <div className="bg-slate-800 rounded-2xl p-4 shadow">
                <div className="flex items-center justify-between">
                  <div className="flex items-center gap-3">
                    <h2 className="text-xl font-semibold">Top — Creators</h2>
                    <span className="text-slate-400 text-sm">{range.toUpperCase()}</span>
                  </div>

                  <div className="flex items-center gap-3">
                    <select value={sort} onChange={(e) => { setSort(e.target.value); setPage(1); }} className="bg-slate-900 border border-slate-700 p-2 rounded text-sm">
                      <option value="score_desc">Score ↓</option>
                      <option value="score_asc">Score ↑</option>
                      <option value="name_asc">Name A→Z</option>
                      <option value="name_desc">Name Z→A</option>
                    </select>

                    <input value={search} onChange={(e) => { setSearch(e.target.value); setPage(1); }} placeholder="Search creators" className="bg-slate-900 border border-slate-700 p-2 rounded text-sm" />
                  </div>
                </div>

                <div className="mt-4 overflow-x-auto">
                  <table className="w-full min-w-[720px]">
                    <thead className="text-slate-400 text-left border-b border-slate-700">
                      <tr>
                        <th className="py-2 px-3">#</th>
                        <th className="py-2 px-3">Name</th>
                        <th className="py-2 px-3">Score</th>
                        <th className="py-2 px-3">Change</th>
                        <th className="py-2 px-3">Lang</th>
                      </tr>
                    </thead>
                    <tbody className="divide-y divide-slate-800">{renderRows()}</tbody>
                  </table>
                </div>

                <div className="mt-4 flex items-center justify-between">
                  <div className="text-sm text-slate-400">Showing <strong>{(page-1)*limit + 1}</strong> - <strong>{Math.min(page*limit, total)}</strong> of <strong>{total}</strong></div>

                  <div className="flex items-center gap-2">
                    <select value={limit} onChange={(e) => { setLimit(Number(e.target.value)); setPage(1); }} className="bg-slate-900 border border-slate-700 p-2 rounded text-sm">
                      <option value={5}>5</option>
                      <option value={10}>10</option>
                      <option value={20}>20</option>
                      <option value={50}>50</option>
                    </select>

                    <nav className="inline-flex items-center gap-1" aria-label="Pagination">
                      <button disabled={page<=1} onClick={() => setPage(1)} className="px-3 py-2 rounded bg-slate-700 disabled:opacity-40">First</button>
                      <button disabled={page<=1} onClick={() => setPage(p => Math.max(1, p-1))} className="px-3 py-2 rounded bg-slate-700 disabled:opacity-40">Prev</button>
                      <div className="px-3 py-2 rounded bg-slate-800 text-sm">{page}</div>
                      <button disabled={page>=totalPages} onClick={() => setPage(p => Math.min(totalPages, p+1))} className="px-3 py-2 rounded bg-slate-700 disabled:opacity-40">Next</button>
                      <button disabled={page>=totalPages} onClick={() => setPage(totalPages)} className="px-3 py-2 rounded bg-slate-700 disabled:opacity-40">Last</button>
                    </nav>
                  </div>
                </div>

              </div>
            </div>
          </div>

          <aside>
            <div className="bg-slate-800 rounded-2xl p-4 shadow space-y-4">
              <div>
                <h3 className="text-sm text-slate-400">Filters</h3>
                <select value={lang} onChange={(e) => { setLang(e.target.value); setPage(1); }} className="mt-2 w-full bg-slate-900 border border-slate-700 p-2 rounded">
                  <option value="all">All Languages</option>
                  <option value="en">English</option>
                  <option value="es">Spanish</option>
                  <option value="de">German</option>
                  <option value="fr">French</option>
                </select>
              </div>

              <div>
                <h3 className="text-sm text-slate-400">Quick Stats</h3>
                <div className="mt-2 grid grid-cols-2 gap-2">
                  <div className="p-3 rounded glass">
                    <div className="text-xs text-slate-400">Active</div>
                    <div className="text-lg font-semibold">{formatNumber(Math.round(total * 0.7))}</div>
                  </div>
                  <div className="p-3 rounded glass">
                    <div className="text-xs text-slate-400">Projects</div>
                    <div className="text-lg font-semibold">{formatNumber(Math.round(total * 0.2))}</div>
                  </div>
                </div>
              </div>

              <div className="pt-2 border-t border-slate-700/50">
                <div className="text-xs text-slate-500">© {new Date().getFullYear()} Your Company</div>
              </div>
            </div>
          </aside>
        </section>
      </main>

      <footer className="mt-12 py-8 border-t border-slate-800">
        <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 text-slate-400 text-sm">Built by the team.</div>
      </footer>
    </div>
  );
}
